'use client';
import { useState, useMemo } from 'react';

const dictionaryData = [
    { term: 'PER', definition: "ÌöåÏÇ¨Ïùò Í∞ÄÏÑ±ÎπÑÎ•º ÏïåÎ†§Ï£ºÎäî ÏßÄÌëúÏòàÏöî. Î∂ïÏñ¥Îπµ Í∞ÄÍ≤åÍ∞Ä 1ÎÖÑÏóê 100ÎßåÏõê Î≤ÑÎäîÎç∞ Í∞ÄÍ≤åÎ•º 1,000ÎßåÏõêÏóê ÌåêÎã§Î©¥ PERÏùÄ 10Î∞∞! Ïù¥ Ïà´ÏûêÍ∞Ä ÎÇÆÏùÑÏàòÎ°ù ÌöåÏÇ¨Í∞Ä Î≤ÑÎäî ÎèàÏóê ÎπÑÌï¥ Ï£ºÍ∞ÄÍ∞Ä Ïã∏Îã§Îäî ÎúªÏù¥Îùº 'Ï†ÄÌèâÍ∞Ä'ÎêòÏóàÎã§Í≥† ÎßêÌï¥Ïöî." },
    { term: 'PBR', definition: 'ÌöåÏÇ¨Ïùò Ï≤≠ÏÇ∞Í∞ÄÏπòÏòàÏöî. ÎßåÏïΩ ÌöåÏÇ¨Í∞Ä ÏßÄÍ∏à ÎãπÏû• ÎßùÌï¥ÏÑú Î™®Îì† ÏûêÏÇ∞ÏùÑ ÌåîÏïòÏùÑ Îïå, ÎÇ¥ Ï£ºÎ®∏ÎãàÏóê ÏñºÎßàÍ∞Ä Îì§Ïñ¥Ïò¨ÏßÄ ÏïåÎ†§Ï§òÏöî. PBRÏù¥ 1Î≥¥Îã§ ÎÇÆÎã§Î©¥? ÌöåÏÇ¨Ïùò ÏûêÏÇ∞ Í∞ÄÏπòÎ≥¥Îã§ÎèÑ Ï£ºÍ∞ÄÍ∞Ä Ïã∏Îã§Îäî ÏïÑÏ£º Îß§Î†•Ï†ÅÏù∏ Ïã†Ìò∏Ïùº Ïàò ÏûàÏñ¥Ïöî!' },
    { term: 'ROE', definition: "'ÎÇ¥ ÎèàÏúºÎ°ú ÏñºÎßàÎÇò Ïûò Î≤åÏóàÎÇò?'Î•º Î≥¥Ïó¨Ï£ºÎäî ÌöåÏÇ¨Ïùò ÏÑ±Ï†ÅÌëúÏòàÏöî. ROEÍ∞Ä 20%ÎùºÎ©¥, ÌöåÏÇ¨Í∞Ä ÏûêÍ∏∞ Îèà 1ÏñµÏúºÎ°ú 1ÎÖÑÏóê 2,000ÎßåÏõêÏùÑ Î≤åÏóàÎã§Îäî Îúª! Ïù¥ Ïà´ÏûêÍ∞Ä ÎÜíÏùÑÏàòÎ°ù Îèà Î≤ÑÎäî Îä•Î†•Ïù¥ Îõ∞Ïñ¥ÎÇú 'Ïùº ÏûòÌïòÎäî ÌöåÏÇ¨'ÎùºÍ≥† Ìï† Ïàò ÏûàÏ£†." },
    { term: 'EPS', definition: "ÎÇ¥Í∞Ä Í∞ÄÏßÑ Ï£ºÏãù 1Ï£ºÍ∞Ä 1ÎÖÑ ÎèôÏïà ÏñºÎßàÎ•º Î≤åÏóàÎäîÏßÄ ÏïåÎ†§Ï£ºÎäî Í∞íÏù¥ÏóêÏöî. ÏòàÎ•º Îì§Ïñ¥ EPSÍ∞Ä 1,000ÏõêÏù¥Î©¥, ÎÇ¥ Ï£ºÏãù Ìïú Ïû•Ïù¥ 1ÎÖÑÏóê 1,000ÏõêÏî© Î≤åÏñ¥Ïò§Í≥† ÏûàÎã§Îäî Îúª! EPSÍ∞Ä Íæ∏Ï§ÄÌûà Ïò§Î•¥Îäî ÌöåÏÇ¨Îäî ÏÑ±Ïû•ÌïòÍ≥† ÏûàÎã§Îäî Ï¢ãÏùÄ Ïã†Ìò∏ÏòàÏöî." },
    { term: 'ÏòàÏàòÍ∏à', definition: "Ï£ºÏãùÏùÑ ÏÇ¨Í∏∞ ÏúÑÌï¥ ÎÇ¥ Ï¶ùÍ∂åÍ≥ÑÏ¢åÏóê ÎÑ£Ïñ¥Îëî Ï¥ùÏïå(ÌòÑÍ∏à)Ïù¥ÏóêÏöî. Ï£ºÏãùÏùÑ ÏÇ¨Î©¥ ÏòàÏàòÍ∏àÏù¥ Ï§ÑÍ≥†, ÌåîÎ©¥ Îã§Ïãú ÎäòÏñ¥ÎÇòÏ£†. Ï£ºÏãù Ï£ºÎ¨∏ÏùÑ ÎÑ£Í∏∞ Ï†ÑÏóê ÏòàÏàòÍ∏àÏù¥ Ï∂©Î∂ÑÌïúÏßÄ Íº≠ ÌôïÏù∏Ìï¥Ïïº Ìï¥Ïöî!" },
    { term: 'ÏãúÍ∞ÄÏ¥ùÏï°', definition: "ÌöåÏÇ¨Ïùò Îç©Ïπò, Ï¶â ÌöåÏÇ¨Ïùò Ï†ÑÏ≤¥ Í∞ÄÍ≤©Ïù¥ÏóêÏöî. (ÌòÑÏû¨ Ï£ºÍ∞Ä X Ï¥ù Ï£ºÏãù Ïàò)Î°ú Í≥ÑÏÇ∞ÌïòÏ£†. ÏãúÍ∞ÄÏ¥ùÏï°Ïù¥ ÌÅ¨Îã§Îäî Í±¥ Í∑∏ÎßåÌÅº Í∑úÎ™®Í∞Ä ÌÅ¨Í≥† ÏïàÏ†ïÏ†ÅÏù∏ ÌöåÏÇ¨ÎùºÎäî Îúª. ÏÇºÏÑ±Ï†ÑÏûêÏùò ÏãúÍ∞ÄÏ¥ùÏï°Ïù¥ Í∞ÄÏû• ÌÅ∞ Í≤ÉÏ≤òÎüºÏöî!" }
];

export default function Dictionary() {
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedTerm, setSelectedTerm] = useState(dictionaryData[0]);

    const filteredTerms = useMemo(() => 
        dictionaryData.filter(item => item.term.toLowerCase().includes(searchTerm.toLowerCase())),
        [searchTerm]
    );

    return (
        <div className="tool-card">
            <h2>üìñ Ï£ºÎ¶∞Ïù¥ Ïö©Ïñ¥ ÏÇ¨Ï†Ñ</h2>
            <input 
                type="text" 
                className="form-group" 
                placeholder="Í∂ÅÍ∏àÌïú Ïö©Ïñ¥Î•º Í≤ÄÏÉâÌï¥Î≥¥ÏÑ∏Ïöî..." 
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
            />
            <div className="dictionary-container">
                <div className="term-list">
                    {filteredTerms.map((item) => (
                        <div 
                            key={item.term}
                            className={`term-list-item ${selectedTerm.term === item.term ? 'active' : ''}`}
                            onClick={() => setSelectedTerm(item)}
                        >
                            {item.term}
                        </div>
                    ))}
                </div>
                <div className="term-definition">
                    <h3>{selectedTerm.term}</h3>
                    <p>{selectedTerm.definition}</p>
                </div>
            </div>
        </div>
    );
}
